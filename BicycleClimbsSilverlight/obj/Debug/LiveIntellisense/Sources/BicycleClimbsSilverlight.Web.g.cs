//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BicycleClimbsSilverlight
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace BicycleClimbsSilverlight.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Climb' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/BicycleClimbsSilverlight.Web")]
    public sealed partial class Climb : Entity
    {
        
        private DateTime _date;
        
        private string _description;
        
        private double _elevationGain;
        
        private int _id;
        
        private double _latitudeStart;
        
        private double _length;
        
        private string _location;
        
        private double _longitudeStart;
        
        private double _maxGradient;
        
        private string _name;
        
        private string _rating;
        
        private int _regionId;
        
        private int _userId;
        
        private int _zoom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnElevationGainChanging(double value);
        partial void OnElevationGainChanged();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnLatitudeStartChanging(double value);
        partial void OnLatitudeStartChanged();
        partial void OnLengthChanging(double value);
        partial void OnLengthChanged();
        partial void OnLocationChanging(string value);
        partial void OnLocationChanged();
        partial void OnLongitudeStartChanging(double value);
        partial void OnLongitudeStartChanged();
        partial void OnMaxGradientChanging(double value);
        partial void OnMaxGradientChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnRatingChanging(string value);
        partial void OnRatingChanged();
        partial void OnRegionIdChanging(int value);
        partial void OnRegionIdChanged();
        partial void OnUserIdChanging(int value);
        partial void OnUserIdChanged();
        partial void OnZoomChanging(int value);
        partial void OnZoomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Climb"/> class.
        /// </summary>
        public Climb()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ElevationGain' value.
        /// </summary>
        [DataMember()]
        public double ElevationGain
        {
            get
            {
                return this._elevationGain;
            }
            set
            {
                if ((this._elevationGain != value))
                {
                    this.OnElevationGainChanging(value);
                    this.RaiseDataMemberChanging("ElevationGain");
                    this.ValidateProperty("ElevationGain", value);
                    this._elevationGain = value;
                    this.RaiseDataMemberChanged("ElevationGain");
                    this.OnElevationGainChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ID
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIDChanging(value);
                    this.ValidateProperty("ID", value);
                    this._id = value;
                    this.RaisePropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LatitudeStart' value.
        /// </summary>
        [DataMember()]
        public double LatitudeStart
        {
            get
            {
                return this._latitudeStart;
            }
            set
            {
                if ((this._latitudeStart != value))
                {
                    this.OnLatitudeStartChanging(value);
                    this.RaiseDataMemberChanging("LatitudeStart");
                    this.ValidateProperty("LatitudeStart", value);
                    this._latitudeStart = value;
                    this.RaiseDataMemberChanged("LatitudeStart");
                    this.OnLatitudeStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Length' value.
        /// </summary>
        [DataMember()]
        public double Length
        {
            get
            {
                return this._length;
            }
            set
            {
                if ((this._length != value))
                {
                    this.OnLengthChanging(value);
                    this.RaiseDataMemberChanging("Length");
                    this.ValidateProperty("Length", value);
                    this._length = value;
                    this.RaiseDataMemberChanged("Length");
                    this.OnLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Location' value.
        /// </summary>
        [DataMember()]
        public string Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    this.OnLocationChanging(value);
                    this.RaiseDataMemberChanging("Location");
                    this.ValidateProperty("Location", value);
                    this._location = value;
                    this.RaiseDataMemberChanged("Location");
                    this.OnLocationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LongitudeStart' value.
        /// </summary>
        [DataMember()]
        public double LongitudeStart
        {
            get
            {
                return this._longitudeStart;
            }
            set
            {
                if ((this._longitudeStart != value))
                {
                    this.OnLongitudeStartChanging(value);
                    this.RaiseDataMemberChanging("LongitudeStart");
                    this.ValidateProperty("LongitudeStart", value);
                    this._longitudeStart = value;
                    this.RaiseDataMemberChanged("LongitudeStart");
                    this.OnLongitudeStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MaxGradient' value.
        /// </summary>
        [DataMember()]
        public double MaxGradient
        {
            get
            {
                return this._maxGradient;
            }
            set
            {
                if ((this._maxGradient != value))
                {
                    this.OnMaxGradientChanging(value);
                    this.RaiseDataMemberChanging("MaxGradient");
                    this.ValidateProperty("MaxGradient", value);
                    this._maxGradient = value;
                    this.RaiseDataMemberChanged("MaxGradient");
                    this.OnMaxGradientChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Rating' value.
        /// </summary>
        [DataMember()]
        public string Rating
        {
            get
            {
                return this._rating;
            }
            set
            {
                if ((this._rating != value))
                {
                    this.OnRatingChanging(value);
                    this.RaiseDataMemberChanging("Rating");
                    this.ValidateProperty("Rating", value);
                    this._rating = value;
                    this.RaiseDataMemberChanged("Rating");
                    this.OnRatingChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        public int RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.RaiseDataMemberChanging("RegionId");
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaiseDataMemberChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'UserId' value.
        /// </summary>
        [DataMember()]
        public int UserId
        {
            get
            {
                return this._userId;
            }
            set
            {
                if ((this._userId != value))
                {
                    this.OnUserIdChanging(value);
                    this.RaiseDataMemberChanging("UserId");
                    this.ValidateProperty("UserId", value);
                    this._userId = value;
                    this.RaiseDataMemberChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zoom' value.
        /// </summary>
        [DataMember()]
        public int Zoom
        {
            get
            {
                return this._zoom;
            }
            set
            {
                if ((this._zoom != value))
                {
                    this.OnZoomChanging(value);
                    this.RaiseDataMemberChanging("Zoom");
                    this.ValidateProperty("Zoom", value);
                    this._zoom = value;
                    this.RaiseDataMemberChanged("Zoom");
                    this.OnZoomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'ClimbData' domain service.
    /// </summary>
    public sealed partial class ClimbData : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClimbData"/> class.
        /// </summary>
        public ClimbData() : 
                this(new WebDomainClient<IClimbDataContract>(new Uri("BicycleClimbsSilverlight-Web-ClimbData.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClimbData"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ClimbData service URI.</param>
        public ClimbData(Uri serviceUri) : 
                this(new WebDomainClient<IClimbDataContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClimbData"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public ClimbData(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="ClimbPathElevation"/> entities that have been loaded into this <see cref="ClimbData"/> instance.
        /// </summary>
        public EntitySet<ClimbPathElevation> ClimbPathElevations
        {
            get
            {
                return base.EntityContainer.GetEntitySet<ClimbPathElevation>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Climb"/> entities that have been loaded into this <see cref="ClimbData"/> instance.
        /// </summary>
        public EntitySet<Climb> Climbs
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Climb>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Region"/> entities that have been loaded into this <see cref="ClimbData"/> instance.
        /// </summary>
        public EntitySet<Region> Regions
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Region>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="ClimbPathElevation"/> entities using the 'GetClimbPathElevation' query.
        /// </summary>
        /// <param name="climbId">The value for the 'climbId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="ClimbPathElevation"/> entities.</returns>
        public EntityQuery<ClimbPathElevation> GetClimbPathElevationQuery(int climbId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("climbId", climbId);
            this.ValidateMethod("GetClimbPathElevationQuery", parameters);
            return base.CreateQuery<ClimbPathElevation>("GetClimbPathElevation", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Climb"/> entities using the 'GetClimbs' query.
        /// </summary>
        /// <param name="regionId">The value for the 'regionId' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Climb"/> entities.</returns>
        public EntityQuery<Climb> GetClimbsQuery(int regionId)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("regionId", regionId);
            this.ValidateMethod("GetClimbsQuery", parameters);
            return base.CreateQuery<Climb>("GetClimbs", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Region"/> entities using the 'GetRegions' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Region"/> entities.</returns>
        public EntityQuery<Region> GetRegionsQuery()
        {
            this.ValidateMethod("GetRegionsQuery", null);
            return base.CreateQuery<Region>("GetRegions", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetHelloValue' method of the domain service.
        /// </summary>
        /// <param name="item">The value for the 'item' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetHelloValue(string item, Action<InvokeOperation<string>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("item", item);
            this.ValidateMethod("GetHelloValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetHelloValue", typeof(string), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GetHelloValue' method of the domain service.
        /// </summary>
        /// <param name="item">The value for the 'item' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<string> GetHelloValue(string item)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("item", item);
            this.ValidateMethod("GetHelloValue", parameters);
            return ((InvokeOperation<string>)(this.InvokeOperation("GetHelloValue", typeof(string), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ClimbDataEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ClimbData' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IClimbDataContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetClimbPathElevation' operation.
            /// </summary>
            /// <param name="climbId">The value for the 'climbId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ClimbData/GetClimbPathElevationDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ClimbData/GetClimbPathElevation", ReplyAction="http://tempuri.org/ClimbData/GetClimbPathElevationResponse")]
            [WebGet()]
            IAsyncResult BeginGetClimbPathElevation(int climbId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClimbPathElevation'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClimbPathElevation'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClimbPathElevation' operation.</returns>
            QueryResult<ClimbPathElevation> EndGetClimbPathElevation(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetClimbs' operation.
            /// </summary>
            /// <param name="regionId">The value for the 'regionId' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ClimbData/GetClimbsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ClimbData/GetClimbs", ReplyAction="http://tempuri.org/ClimbData/GetClimbsResponse")]
            [WebGet()]
            IAsyncResult BeginGetClimbs(int regionId, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetClimbs'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetClimbs'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetClimbs' operation.</returns>
            QueryResult<Climb> EndGetClimbs(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetHelloValue' operation.
            /// </summary>
            /// <param name="item">The value for the 'item' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ClimbData/GetHelloValueDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ClimbData/GetHelloValue", ReplyAction="http://tempuri.org/ClimbData/GetHelloValueResponse")]
            IAsyncResult BeginGetHelloValue(string item, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetHelloValue'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetHelloValue'.</param>
            /// <returns>The 'String' returned from the 'GetHelloValue' operation.</returns>
            string EndGetHelloValue(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetRegions' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ClimbData/GetRegionsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ClimbData/GetRegions", ReplyAction="http://tempuri.org/ClimbData/GetRegionsResponse")]
            [WebGet()]
            IAsyncResult BeginGetRegions(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetRegions'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetRegions'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetRegions' operation.</returns>
            QueryResult<Region> EndGetRegions(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ClimbData/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ClimbData/SubmitChanges", ReplyAction="http://tempuri.org/ClimbData/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ClimbDataEntityContainer : EntityContainer
        {
            
            public ClimbDataEntityContainer()
            {
                this.CreateEntitySet<Climb>(EntitySetOperations.None);
                this.CreateEntitySet<ClimbPathElevation>(EntitySetOperations.None);
                this.CreateEntitySet<Region>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'ClimbPathElevation' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/BicycleClimbsSilverlight.Web")]
    public sealed partial class ClimbPathElevation : Entity
    {
        
        private int _climbId;
        
        private double _elevation;
        
        private double _latitude;
        
        private double _longitude;
        
        private int _number;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnClimbIdChanging(int value);
        partial void OnClimbIdChanged();
        partial void OnElevationChanging(double value);
        partial void OnElevationChanged();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnNumberChanging(int value);
        partial void OnNumberChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClimbPathElevation"/> class.
        /// </summary>
        public ClimbPathElevation()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ClimbId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ClimbId
        {
            get
            {
                return this._climbId;
            }
            set
            {
                if ((this._climbId != value))
                {
                    this.OnClimbIdChanging(value);
                    this.ValidateProperty("ClimbId", value);
                    this._climbId = value;
                    this.RaisePropertyChanged("ClimbId");
                    this.OnClimbIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Elevation' value.
        /// </summary>
        [DataMember()]
        public double Elevation
        {
            get
            {
                return this._elevation;
            }
            set
            {
                if ((this._elevation != value))
                {
                    this.OnElevationChanging(value);
                    this.RaiseDataMemberChanging("Elevation");
                    this.ValidateProperty("Elevation", value);
                    this._elevation = value;
                    this.RaiseDataMemberChanged("Elevation");
                    this.OnElevationChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public double Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public double Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Number' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    this.OnNumberChanging(value);
                    this.ValidateProperty("Number", value);
                    this._number = value;
                    this.RaisePropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._climbId, this._number);
        }
    }
    
    /// <summary>
    /// The 'Region' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/BicycleClimbsSilverlight.Web")]
    public sealed partial class Region : Entity
    {
        
        private double _latitude;
        
        private double _longitude;
        
        private int _regionId;
        
        private string _regionName;
        
        private int _zoom;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnLatitudeChanging(double value);
        partial void OnLatitudeChanged();
        partial void OnLongitudeChanging(double value);
        partial void OnLongitudeChanged();
        partial void OnRegionIdChanging(int value);
        partial void OnRegionIdChanged();
        partial void OnRegionNameChanging(string value);
        partial void OnRegionNameChanged();
        partial void OnZoomChanging(int value);
        partial void OnZoomChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Region"/> class.
        /// </summary>
        public Region()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Latitude' value.
        /// </summary>
        [DataMember()]
        public double Latitude
        {
            get
            {
                return this._latitude;
            }
            set
            {
                if ((this._latitude != value))
                {
                    this.OnLatitudeChanging(value);
                    this.RaiseDataMemberChanging("Latitude");
                    this.ValidateProperty("Latitude", value);
                    this._latitude = value;
                    this.RaiseDataMemberChanged("Latitude");
                    this.OnLatitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Longitude' value.
        /// </summary>
        [DataMember()]
        public double Longitude
        {
            get
            {
                return this._longitude;
            }
            set
            {
                if ((this._longitude != value))
                {
                    this.OnLongitudeChanging(value);
                    this.RaiseDataMemberChanging("Longitude");
                    this.ValidateProperty("Longitude", value);
                    this._longitude = value;
                    this.RaiseDataMemberChanged("Longitude");
                    this.OnLongitudeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionId' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int RegionId
        {
            get
            {
                return this._regionId;
            }
            set
            {
                if ((this._regionId != value))
                {
                    this.OnRegionIdChanging(value);
                    this.ValidateProperty("RegionId", value);
                    this._regionId = value;
                    this.RaisePropertyChanged("RegionId");
                    this.OnRegionIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'RegionName' value.
        /// </summary>
        [DataMember()]
        public string RegionName
        {
            get
            {
                return this._regionName;
            }
            set
            {
                if ((this._regionName != value))
                {
                    this.OnRegionNameChanging(value);
                    this.RaiseDataMemberChanging("RegionName");
                    this.ValidateProperty("RegionName", value);
                    this._regionName = value;
                    this.RaiseDataMemberChanged("RegionName");
                    this.OnRegionNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zoom' value.
        /// </summary>
        [DataMember()]
        public int Zoom
        {
            get
            {
                return this._zoom;
            }
            set
            {
                if ((this._zoom != value))
                {
                    this.OnZoomChanging(value);
                    this.RaiseDataMemberChanging("Zoom");
                    this.ValidateProperty("Zoom", value);
                    this._zoom = value;
                    this.RaiseDataMemberChanged("Zoom");
                    this.OnZoomChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._regionId;
        }
    }
}
